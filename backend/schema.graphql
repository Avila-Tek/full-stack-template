"""The `Boolean` scalar type represents `true` or `false`."""
scalar Boolean

"""The `Boolean` scalar type represents `true` or `false`."""
scalar Boolean

input ChangePasswordInput {
  token: String!
  password: String!
}

""""""
input CreateOneUserInput {
  slug: String
  firstName: String!
  lastName: String!
  email: String!
  password: String
  birthDate: Date
  phones: [String]
  privilege: Float
  resetToken: String
  resetTokenExpiry: Float
  active: Boolean
  photo: String
  updatedAt: Date
  createdAt: Date
}

type CreateOneUserPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

scalar Date

scalar Date

interface ErrorInterface {
  """Generic error message"""
  message: String
}

input FilterFindManyUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterFindManyUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterFindManyUserInput {
  slug: String
  firstName: String
  lastName: String
  email: String
  password: String
  birthDate: Date
  phones: [String]
  privilege: Float
  resetToken: String
  resetTokenExpiry: Float
  active: Boolean
  photo: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyUserOperatorsInput
  OR: [FilterFindManyUserInput!]
  AND: [FilterFindManyUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyUserOperatorsInput {
  email: FilterFindManyUserEmailOperatorsInput
  _id: FilterFindManyUser_idOperatorsInput
}

input FilterFindOneUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterFindOneUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterFindOneUserInput {
  slug: String
  firstName: String
  lastName: String
  email: String
  password: String
  birthDate: Date
  phones: [String]
  privilege: Float
  resetToken: String
  resetTokenExpiry: Float
  active: Boolean
  photo: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneUserOperatorsInput
  OR: [FilterFindOneUserInput!]
  AND: [FilterFindOneUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneUserOperatorsInput {
  email: FilterFindOneUserEmailOperatorsInput
  _id: FilterFindOneUser_idOperatorsInput
}

input FilterUpdateOneUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

input FilterUpdateOneUserEmailOperatorsInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
  regex: RegExpAsString
  exists: Boolean
}

""""""
input FilterUpdateOneUserInput {
  slug: String
  firstName: String
  lastName: String
  email: String
  password: String
  birthDate: Date
  phones: [String]
  privilege: Float
  resetToken: String
  resetTokenExpiry: Float
  active: Boolean
  photo: String
  _id: MongoID
  updatedAt: Date
  createdAt: Date

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneUserOperatorsInput
  OR: [FilterUpdateOneUserInput!]
  AND: [FilterUpdateOneUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneUserOperatorsInput {
  email: FilterUpdateOneUserEmailOperatorsInput
  _id: FilterUpdateOneUser_idOperatorsInput
}

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

"""
The `ID` scalar type represents a unique MongoDB identifier in collection. MongoDB by default use 12-byte ObjectId value (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB also may accepts string or integer as correct values for _id field.
"""
scalar MongoID

"""
The `ID` scalar type represents a unique MongoDB identifier in collection. MongoDB by default use 12-byte ObjectId value (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB also may accepts string or integer as correct values for _id field.
"""
scalar MongoID

type Mutation {
  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  createUser(record: CreateOneUserInput!): CreateOneUserPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  updateUser(
    record: UpdateOneUserInput!

    """Filter by fields"""
    filter: FilterUpdateOneUserInput
    sort: SortUpdateOneUserInput
    skip: Int
  ): UpdateOneUserPayload

  """Change Password"""
  changePassword(data: ChangePasswordInput): ResetPasswordInfo

  """Reset Password"""
  resetPassword(data: ResetPasswordInput): ResetPasswordInfo

  """Sign In an user to the app"""
  signIn(data: SignInInput): User

  """Sign Out an user from the app"""
  signOut: SignOutType
}

type Query {
  user(
    """Filter by fields"""
    filter: FilterFindOneUserInput
    skip: Int
    sort: SortFindOneUserInput
  ): User
  users(
    """Filter by fields"""
    filter: FilterFindManyUserInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyUserInput
  ): [User!]!

  """Return the user object based on the token"""
  currentUser: User
}

"""
The string representation of JavaScript regexp. You may provide it with flags "/^abc.*/i" or without flags like "^abc.*". More info about RegExp characters and flags: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
"""
scalar RegExpAsString @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf")

type ResetPasswordInfo {
  success: Boolean!
  err: String
}

input ResetPasswordInput {
  email: String!
}

input SignInInput {
  email: String!
  password: String!
}

type SignOutType {
  success: Boolean!
}

enum SortFindManyUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
}

enum SortFindOneUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
}

enum SortUpdateOneUserInput {
  _ID_ASC
  _ID_DESC
  EMAIL_ASC
  EMAIL_DESC
}

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

""""""
input UpdateOneUserInput {
  slug: String
  firstName: String
  lastName: String
  email: String
  password: String
  birthDate: Date
  phones: [String]
  privilege: Float
  resetToken: String
  resetTokenExpiry: Float
  active: Boolean
  photo: String
  updatedAt: Date
  createdAt: Date
}

type UpdateOneUserPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type User {
  slug: String
  firstName: String!
  lastName: String!
  email: String!
  password: String
  birthDate: Date
  phones: [String]
  privilege: Float
  resetToken: String
  resetTokenExpiry: Float
  active: Boolean
  photo: String
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}

type User {
  slug: String
  firstName: String!
  lastName: String!
  email: String!
  password: String
  birthDate: Date
  phones: [String]
  privilege: Float
  resetToken: String
  resetTokenExpiry: Float
  active: Boolean
  photo: String
  _id: MongoID!
  updatedAt: Date
  createdAt: Date
}